# -*- coding: utf-8 -*-
"""image.ipynb のコピー

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LDY8bRHe-l7Sg-vc-1T_wKEOQUF0yk63
"""

import os, sys, getopt
import tensorflow as tf
import math
import numpy as np

def tensor_to_png( image, filename):
  image_enc = tf.io.encode_png(image)
  fname = tf.constant(filename)
  fwrite = tf.io.write_file(fname, image_enc)


def image_add_line(  np_image, x_m, y_m, length, angle, shade=255, thickness=1):

  for width in range( 0, thickness ):
    for r in range(0, length):

      y = x_m - int( r * math.cos( angle*math.pi/180) )
      x = y_m - int( r * math.sin( angle*math.pi/180) )

      print( x, y, angle, shade )
      np_image[x,y,0] = shade
      np_image[x,y,1] = shade
      np_image[x,y,2] = shade

      if width > 0:
        y = -int( r * math.cos( angle*math.pi/180) ) + x_m + width
        x =  -int( r * math.sin( angle*math.pi/180) ) + y_m + width

        np_image[x,y,0] = shade
        np_image[x,y,1] = shade
        np_image[x,y,2] = shade

        y = -int( r * math.cos( angle*math.pi/180) ) + x_m - width
        x =  -int( r * math.sin( angle*math.pi/180) ) + y_m - width

        np_image[x,y,0] = shade
        np_image[x,y,1] = shade
        np_image[x,y,2] = shade

def _face( diameter, angle, needle_len, back_shade=255, needle_shade=0, thickness=1 ):
  np_image = np.full( ( ( diameter) , ( diameter), 3), back_shade )
  x_m = int(diameter - 10 )
  y_m = int(diameter - 10)
  image_add_line(  np_image, x_m, y_m, needle_len, angle, shade=needle_shade, thickness=thickness )
  image = tf.convert_to_tensor( np_image, tf.float32 )
  image = tf.cast( image, dtype=tf.uint8 )
  return image

def face_gen( sub_dir, file_handle, diameter, angle_limit, needle_len, thickness=1 ):
    base_dir = os.getcwd()
    full_dir = os.path.join( base_dir, sub_dir )
    if not os.path.isdir(full_dir):
        os.mkdir(full_dir)

    for angle in range(0, angle_limit ):
        image = _face( diameter, angle, needle_len, thickness=thickness )
        filename = "meter_" + str(angle) + "_" +  str(needle_len) + "_" + str(thickness) + ".png"
        filename_path = os.path.join(sub_dir, filename)
        csv_line =  filename_path + "," + str(angle/angle_limit)
        csv_line += "\n"
        file_handle.write(csv_line)
        tensor_to_png( image, filename_path )

def meterface_gen( dir_name, file_handle, diameter, needle_len_min=50, needle_len_max=70, thickness_max=1 ):
  for thickness in range(  1, thickness_max+1):
    for needle_len in range(  int( diameter*needle_len_min/100 ) , int( diameter*needle_len_max/100 ), 5):
     face_gen( dir_name, file_handle, diameter, 90, needle_len, thickness=thickness )


def meter_gen_csv( dir_name, csv_file, diameter, angle_limit, needle_len_min=70, needle_len_max=90, thickness_max=1 ):
    # dir_name = os.path.join( curr_dir, dir )
    base_dir = os.getcwd()
    full_dir = os.path.join( base_dir, dir_name )
    #
    if not os.path.isdir(full_dir):
        os.mkdir(full_dir)
        print('Created directory {}.'.format(full_dir))

    with open( os.path.join( dir_name, csv_file ), 'w') as file_handle:
        file_handle.write("filename, angle\n")
        meterface_gen( dir_name, file_handle, diameter, thickness_max=thickness_max )



def main( argv ):
    """
    :param argv: Command line arguments
    """
    dir    = None # Destination directory
    csv    = None # CSV File

    try:
        opts, args = getopt.getopt(argv,"hd:c:",["dir=","csv"])
    except getopt.GetoptError:
        print('python createMeterTensorImageNeedle.py -d <dir> -c <csv>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('python createMeterTensorImageNeedle.py -d <dir> -c <csv>')
            sys.exit()
        elif opt in ("-d", "--dir"):
            dir = arg
        elif opt in ("-c", "--csv"):
            csv = arg

    if csv is None or dir is  None:
        print('python createMeterTensorImageNeedle.py -d <dir> -c <csv>')
        exit(2)

    print(" Directory ", dir  )
    meter_gen_csv(  dir, csv, 144, 90, thickness_max=2 )


if __name__ == "__main__":
    if len(sys.argv) != 5:
        print('python createMeterTensorImageNeedle.py -d <dir> -c <csv>')
        sys.exit(2)
    main(sys.argv[1:])
